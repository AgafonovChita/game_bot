from bot.services.repo import SQLAlchemyRepo, GameRepo, TeamRepo

IS_NOT_SCHEDULE = "Проведение игры разделено на 2 этапа\n\n" \
                    "<b>\U0001F539 Этап №1.</b> <i>Заранее перед игрой</i>\n" \
                    "Необходимо <b>ЗАПЛАНИРОВАТЬ ИГРУ</b>\n" \
                    "<i>C этого момента команды могут добавлять бота в свои групповые чаты. " \
                    "При добавлении бота командам будет приходить сообщение с инструкцией по работе с ботом.</i>\n\n" \
                    "<b>\U0001F539 Этап №2.</b> <i>Когда все команды готовы.</i>\n" \
                    "Дать <b>СТАРТ ИГРЕ</b>\n" \
                    "<i>Во все чаты, куда был добавлен бот будет отправлено первое задание, " \
                    "бот начнёт принимать ответы, давать подсказки и фиксировать время прохождения</i>"

IS_SCHEDULE = "<b>\U0000203C Проведение игры ЗАПЛАНИРОВАНО</b>\n\n" \
                   "<i>C этого момента команды могут начать добавлять бота в свои групповые чаты. " \
                    "При добавлении бота командам будет приходить сообщение с инструкцией по работе с ботом.</i>\n\n" \
                    "<b>\U0001F539 Этап №2.</b> <i>Когда все команды готовы.</i>\n" \
                    "Дать <b>СТАРТ ИГРЕ</b>\n" \
                    "<i>Во все чаты, куда был добавлен бот будет отправлено первое задание, " \
                    "бот начнёт принимать ответы, давать подсказки и фиксировать время прохождения</i>"

IS_START = "<b>\U000026A1 ИГРА ЗАПУЩЕНА \n\n </b>" \
                "<i>Вы можете следить за статистикой в меню <b>ПРОТОКОЛ</b></i>"

IS_COMPLETE = "<b>\U0000274E ИГРА БЫЛА ЗАВЕРШЕНА </b> \n\n" \
              "<i>Вы можете просмотреть/скачать протокол игры. \n\nЕсли вы желаете запланировать новую игру," \
              "вам необходимо <b>сбросить данные</b>. После сброса данных, текущий протокол будет удалён и " \
              "вы сможете запланировать проведение новой игры.</i>"


async def control_game_text(repo: SQLAlchemyRepo):
    game_state = await repo.get_repo(GameRepo).get_game_state()
    if game_state is None:
        return IS_NOT_SCHEDULE
    elif game_state == 1:
        return IS_SCHEDULE
    elif game_state == 2:
        return IS_START
    elif game_state == 3:
        return IS_COMPLETE


async def stop_game_text(repo: SQLAlchemyRepo):
    #statistics = await repo.get_repo(ProtocolRepo).get_statistics()
    return f"\U00002757 ВНИМАНИЕ\nПосле подтверждения продолжение игры будет невозможно\n\n" \
           f"<i>Команды больше не будут получать задания и не смогут вводить ответы. " \
           f"Протокол игры будет зафиксирован в текущем состоянии.</i>"


async def teams_text(repo: SQLAlchemyRepo):
    teams = await repo.get_repo(TeamRepo).get_teams_list()
    text = ''
    if teams:
        for idx, team in enumerate(teams, start=1):
            text += f"{idx}: {team.team_name}\n"
    return text



